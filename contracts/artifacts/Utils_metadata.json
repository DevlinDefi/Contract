{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract Router",
						"name": "_routerAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_WBNB",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_BUSD",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "BUSD",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "contract LP",
						"name": "lpAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "isLp",
						"type": "uint256"
					},
					{
						"internalType": "contract MetaMasterChef",
						"name": "MasterChef",
						"type": "address"
					}
				],
				"name": "CalcApy",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "contract NFTMasterChef",
						"name": "MasterChef",
						"type": "address"
					}
				],
				"name": "CalcApyNFTFarm",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "contract IERC721",
						"name": "NFTAddress",
						"type": "address"
					},
					{
						"internalType": "contract NFTStake",
						"name": "NFTStakechef",
						"type": "address"
					}
				],
				"name": "CalcApyNFTStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract LP",
						"name": "lpAddress",
						"type": "address"
					}
				],
				"name": "CalcLpPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract MetaMasterChef",
						"name": "MasterChef",
						"type": "address"
					},
					{
						"internalType": "contract LP[]",
						"name": "lpAddress",
						"type": "address[]"
					}
				],
				"name": "CalcTotalTVL",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract MetaMasterChef",
						"name": "MasterChef",
						"type": "address"
					},
					{
						"internalType": "contract LP[]",
						"name": "lpAddress",
						"type": "address[]"
					}
				],
				"name": "CalcTotalTVLNFTFarm",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "Tokenprice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "WBNB",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "WBNBPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"internalType": "contract LP",
						"name": "lpAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "isLp",
						"type": "uint256"
					},
					{
						"internalType": "contract MetaMasterChef",
						"name": "MasterChef",
						"type": "address"
					}
				],
				"name": "calcPoolTVLInUSD",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract LP",
						"name": "lpAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "isLp",
						"type": "uint256"
					},
					{
						"internalType": "contract MetaMasterChef",
						"name": "MasterChef",
						"type": "address"
					}
				],
				"name": "calcPoolTVLInUSDNFTFarm",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract LP",
						"name": "lpAddress",
						"type": "address"
					}
				],
				"name": "isLpAddress",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "routerAddress",
				"outputs": [
					{
						"internalType": "contract Router",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract Router",
						"name": "_routerAddress",
						"type": "address"
					}
				],
				"name": "setRouter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Utils.sol": "Utils"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Utils.sol": {
			"keccak256": "0x77f50f86415f48b8b3939f7c7d3f40efcc36ec1535a63a7911f36492074addcd",
			"license": "MIT",
			"urls": [
				"bzz-raw://89b880bc981691225e57cd05130ef7df7810fda35cdf373a36b67a136c5074e4",
				"dweb:/ipfs/QmZNmbKdg4udv3YD4r3vB2gqdp7z3cCdbrwTUakyJq13Eb"
			]
		}
	},
	"version": 1
}